Class Note 07/16/2024

package name day_09_waits_js_aler_iframe_window

Today's topic:

Synchronization continue (Explicit wait)
Iframe
JavaScript Alerts
Multiple windows/tabs

---------------------------------------------------------------

Synchronization:

Implicit wait is type of wait in Selenium WebDriver that is used to wait for the web element to available. 
Implicit wait is set once and it will work for the entire session, and every time findElement method is used, implicit wait will apply automatically if the web element is not available.

Syntax: driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));


Explicit wait is another type of Selenium WebDriver wait that is use to wait until the specific condition is met.
Using Explicit wait, we need to create an object from WebDriverWait class, and use that object to wait for specific condition to met when locating a web element. Explicit does not apply automatically, so we have to call explicit and set a condition for it. 

Syntax: WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

Why do we/you use explicit wait?

Sometime web elements are on the page, but they might take some time to be visible, enabled,  clickable, etc..

ExpectedConditions methods/wait:

titleIs("string"); -> it waits until the title is equal to given string
titleContains("string"); -> it waits until the title contains given string
alertIsPresent(); -> it waits until until JS alert to be present
elementToBeClickable(element); -> it waits until the element to be clickable
visibilityOf(element); -> it waits until visibility of element, Element is available but not visible.
visibilityOfElementLocatedBy(By.locatorType("")); -> waits until visibility of given element

invisibilityOf(element); -> it waits until the element is invisible
invisibilityOf(element) is the opposite of visibilityOf(element)

----------------------------------------------

Alert/Pop Up:

What is Alert?

Alert is a small message that displayed/appears on-screen notification to give user some kind of information or ask for permission to perform certain action.

There are 2 type of Alerts:

1. HTML Alert: You can just locate the alert using findElement and click
2. JavaScript alert:

JavaScript alert is a type of a pop up
-Blocks the page when present, you can NOT do anything else
 until you deal with the alert.
-User has to accept or cancel
-Not part of html

There are 3 type of JavaScript alert:

1. Warning/information alert
   This alert displays some information or warning on the screen
   We have only accept option

2. Prompt alert
   It has input box which allows you to give an input before accept or dismiss

3. Confirmation alert:
   You can either accept or dismiss it.


How to handle JavaScript alert in Selenium WebDriver

First, we need to switch the driver to Alert

e.g Alert alert = driver.switchTo().alert();


Use methods provided by Alert to handle JavaScript alerts:


1. dismiss(); -> to click on 'Cancel' or 'Dismiss' button of the alert
   alert.dismiss(); to dismiss/cancel the alert
   or switch and dismiss/cancel the alert:
   driver.switchTo().alert().dismiss();

2. accept(); -> to click on 'Ok' or 'Accept' button of the alert
   alert.accept();
   or switch and dismiss/cancel the alert:
   driver.switchTo().alert().accept();


3. getText(); -> to get the text of alert as String
   alert.getText(); -> to get the text of alert
   or switch and dismiss/cancel the alert:
   driver.switchTo().alert().getText();

4. sendKeys("str"); -> to send some input to alert input box
   alert.sendKeys("str") to send some input to alert input field/box
   or switch and dismiss/cancel the alert:
   driver.switchTo().alert().sendKeys("str");



----------------------------------------------------

Frame/Iframe:

Frames in Selenium are segment of an HTML document, also knows as iframes, that contains individual HTML document (HTML inside another HTML).

The main HTML page can have multiple HTML pages there are called 'iframe'


If we need to locate some web element or interact with some web element that are in another an iframe(another html page), we need to switch the driver to that iframe so that the driver can focus on that frame.

If there are multiple ifame/html pages inside the main HTML page, web driver cannot focus/go directly to any iframe unless we switch the driver to that frame


How to locate and switch driver to iframe?

There are 3 ways we can locate and switch the driver to iframe:

1. Locate the iframe as a web element and then use that web element to switch:
   e.g WebElement iframe = driver.findElement(By.locator("//tag"));
   driver.swithTo().frame(iframe);

2. Switch to iframe by its ID (id attribute value);
   driver.switchTo().frame("Id value of iframe");

3. Switch to iframe by index:
   driver.switchTo().frame(index);


Once you switch to any frame, the driver will be in that frame until you switch back to main or any other frame that you want the driver to focus.


Switch back to parent frame:
driver.switchTo().parentFrame(); to switch the driver to parent frame
it doesn't switch back to the Main Frame/main HTML if it is nested frame

Switch back to the main frame/main HTML form any frame
driver.switchTo().defaultContent();

























